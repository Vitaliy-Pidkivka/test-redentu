{"version":3,"sources":["components/shared/Button/Button.module.scss","components/shared/Button/Button.jsx","components/NodeEmelent/NodeElement.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","children","className","onClick","styles","button","NodeElement","color","background","fontSize","text","style","defaultStyleValues","App","state","cutText","focusOffset","anchorOffset","textNodes","getRangeObject","window","getSelection","getRangeAt","setNewCutText","range","setState","startContainer","nodeValue","toString","startOffset","endOffset","alert","nodeToJson","body","document","querySelector","id","recursion","element","childNodes","forEach","node","nodeName","textContent","match","obj","push","console","log","JSON","stringify","changeColor","domRangeHighlight","changeBg","zoomInFont","createBr","innerHTML","this","root","firstChild","content","includes","createRange","setStart","indexOf","setEnd","length","highlightDiv","createElement","br","isStyleBr","contentToSurround","surroundContents","spellCheck","onMouseUp","map","key","React","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4b70221.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3GV2j\"};","import React from \"react\";\r\nimport styles from './Button.module.scss'\r\n\r\nconst Button = ({children, className = 'button', onClick}) => (\r\n    <button\r\n        className={`${styles.button} ${className}`}\r\n        onClick={onClick}\r\n    >\r\n        {children}\r\n    </button>\r\n)\r\nexport default Button","import React from \"react\";\r\n\r\nconst NodeElement = ({ color = 'black', background = 'white', fontSize = '20px', text = '' }) => (\r\n    <span\r\n        style={{\r\n            fontSize,\r\n            color,\r\n            background\r\n        }}\r\n    >\r\n    {text + ' '}\r\n  </span>\r\n)\r\n\r\nexport default  NodeElement","import React from 'react';\nimport './App.scss';\nimport Button from \"./components/shared/Button/Button\";\nimport NodeElement from \"./components/NodeEmelent/NodeElement\";\n\n\nconst defaultStyleValues = {\n    color: 'blue',\n    background: 'red',\n    fontSize: '40px',\n}\nclass App extends React.Component {\n\n    componentDidMount() {\n        const text = document.querySelector('.text');\n        text.innerHTML = `${this.state.text}`\n    }\n    state = {\n        text: 'Hi My lovely little Ponny',\n        cutText: '',\n        focusOffset: 0,\n        anchorOffset: 0,\n        textNodes: [],\n    }\n    domRangeHighlight(style) {\n        const { cutText: text } = this.state\n        const root = document.querySelector('.text').firstChild;\n        const content = root.nodeValue;\n        if (content.includes(text)) {\n            if (document.createRange) {\n                const range = document.createRange();\n                range.setStart(root, content.indexOf(text));\n                range.setEnd(root, content.indexOf(text) + text.length);\n                const highlightDiv = document.createElement('span');\n                const br = document.createElement('br');\n                const isStyleBr = (style === 'br')\n                if (!isStyleBr) {\n                    highlightDiv.style[style] = defaultStyleValues[style]\n                }\n                const contentToSurround = isStyleBr ? br : highlightDiv\n                range.surroundContents(contentToSurround)\n            }\n        } else {\n            alert('Select text from right to left please, move only right to left direction');\n        }\n    }\n    getRangeObject = () => {\n        if (window.getSelection) {\n             return window.getSelection().getRangeAt(0);\n        }\n        return null;\n    }\n    setNewCutText = () => {\n        var range = this.getRangeObject();\n        if (range) {\n            this.setState({\n                text: range.startContainer.nodeValue,\n                cutText: range.toString(),\n                focusOffset: range.startOffset,\n                anchorOffset: range.endOffset,\n            })\n        } else {\n            alert('Select text from right to left please, move only right to left direction');\n        }\n    }\n    nodeToJson = () => {\n        const body = document.querySelector('.text');\n        const textNodes = [];\n        let id = 0;\n        function recursion(element) {\n            element.childNodes.forEach((node => {\n                const {nodeName, style, textContent } = node\n                // const { background = 'white', color = 'black', fontSize = '20px' } = style\n                if (nodeName.match(/^SPAN/)) {\n                    const obj = {\n                        id,\n                        text: textContent,\n                        fontSize: style.fontSize,\n                        color:style.color,\n                        background: style.background,\n                    }\n                    id++\n                    textNodes.push(obj)\n                } else { recursion(node)}\n            }))\n        }\n\n        recursion(body)\n        this.setState({textNodes}, () => {\n            alert('Open console.log to view the result')\n            console.log(JSON.stringify(this.state.textNodes))\n        })\n\n    }\n    changeColor = () => {this.domRangeHighlight( 'color');}\n    changeBg = () => {this.domRangeHighlight('background');}\n    zoomInFont = () => {this.domRangeHighlight( 'fontSize'); }\n    createBr = () => { this.domRangeHighlight( 'br'); }\n    render() {\n        return (\n            <div className=\"App\">\n                <span\n                    spellCheck={true}\n                    className=\"text\"\n                    onMouseUp={this.setNewCutText}>\n                </span>\n                <div>\n                    {this.state.textNodes.map(textNodes => (<NodeElement key={textNodes.id} {...textNodes} />))}\n                </div>\n                <div className=\"buttons\">\n                    <Button onClick={this.changeBg}>\n                        change bg\n                    </Button>\n                    <Button onClick={this.changeColor}>\n                        change color\n                    </Button>\n                    <Button onClick={this.zoomInFont}>\n                        zoom in font\n                    </Button>\n                    <Button onClick={this.createBr}>\n                        br\n                    </Button>\n                    <Button onClick={this.nodeToJson}>\n                        create JSON\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}