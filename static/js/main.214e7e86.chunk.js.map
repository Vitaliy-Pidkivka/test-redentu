{"version":3,"sources":["components/shared/Button/Button.module.scss","components/shared/Button/Button.jsx","components/NodeEmelent/NodeElement.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","styles","button","onClick","value","NodeElement","style","fontSize","color","background","text","App","state","cutText","focusOffset","anchorOffset","textNodes","getRangeObject","win","window","getSelection","getRangeAt","e","document","selection","range","createRange","fixIERangeObject","setNewCutText","setState","startContainer","nodeValue","toString","startOffset","endOffset","alert","nodeToJson","body","querySelector","id","recursy","element","childNodes","forEach","node","nodeName","match","obj","textContent","push","console","log","JSON","stringify","changeColor","domRangeHighlight","changeBg","zoomInFont","createBr","innerHTML","this","root","firstChild","content","indexOf","rng","setStart","setEnd","length","highlightDiv","createElement","br","surroundContents","spellCheck","onMouseUp","map","key","React","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,yB,+MCUZC,EARA,SAACC,GACZ,OACI,4BAAQC,UAAS,UAAKC,IAAOC,OAAZ,YAAsBH,EAAMC,WAAaD,EAAMC,WACxDG,QAASJ,EAAMI,SAClBJ,EAAMK,QCQHC,EAbI,SAACN,GAIjB,OACI,0BAAMO,MAAO,CAACC,SAAUR,EAAMQ,UAJjB,OAKTC,MAAOT,EAAMS,OAJF,QAKXC,WAAYV,EAAMU,aAJV,SAKPV,EAAMW,KAAO,MC8GXC,E,4MA7GXC,MAAQ,CACJF,KAAM,4BACNG,QAAS,GACTC,YAAa,EACbC,aAAc,EACdC,UAAW,I,EA0BfC,eAAiB,SAACC,GAEd,IADAA,EAAMA,GAAOC,QACLC,aACJ,IACI,OAAOF,EAAIE,eAAeC,WAAW,GACvC,MAAOC,SACN,GAAIJ,EAAIK,SAASC,UAAW,CAC/B,IAAIC,EAAQP,EAAIK,SAASC,UAAUE,cACnC,OAAO,EAAKC,iBAAiBF,EAAOP,GAExC,OAAO,M,EAEXU,cAAgB,WACZ,IAAIH,EAAQ,EAAKR,iBACbQ,EACA,EAAKI,SAAS,CACVnB,KAAMe,EAAMK,eAAeC,UAC3BlB,QAASY,EAAMO,WACflB,YAAaW,EAAMQ,YACnBlB,aAAcU,EAAMS,YAGxBC,MAAM,oF,EAGdC,WAAa,WACT,IAAMC,EAAOd,SAASe,cAAc,SAChCtB,EAAY,GACZuB,EAAK,GACT,SAASC,EAAQC,GACbA,EAAQC,WAAWC,SAAS,SAAAC,GACxB,GAAIA,EAAKC,SAASC,MAAM,SAAU,CAC9B,IAAMC,EAAM,CACRR,GAAIA,EAAI7B,KAAMkC,EAAKI,YAAczC,SAAUqC,EAAKtC,MAAMC,SAAWqC,EAAKtC,MAAMC,SAAW,OACvFC,MAAOoC,EAAKtC,MAAME,MAAQoC,EAAKtC,MAAME,MAAQ,QAC7CC,WAAYmC,EAAKtC,MAAMG,WAAamC,EAAKtC,MAAMG,WAAa,QAC5DoC,SAAUD,EAAKC,UAEnBN,IACAvB,EAAUiC,KAAKF,QACVP,EAAQI,MAIzBJ,CAAQH,GACR,EAAKR,SAAS,CAACb,cAAY,WACvBmB,MAAM,qGACNe,QAAQC,IAAIC,KAAKC,UAAU,EAAKzC,MAAMI,gB,EAI9CsC,YAAc,WAAO,EAAKC,kBAAkB,EAAK3C,MAAMC,QAAS,U,EAChE2C,SAAW,WAAO,EAAKD,kBAAkB,EAAK3C,MAAMC,QAAS,e,EAC7D4C,WAAa,WAAO,EAAKF,kBAAkB,EAAK3C,MAAMC,QAAS,S,EAC/D6C,SAAW,WAAQ,EAAKH,kBAAkB,EAAK3C,MAAMC,QAAS,O,kEAxF/CU,SAASe,cAAc,SAC7BqB,UAAL,UAAoBC,KAAKhD,MAAMF,Q,wCASjBA,EAAMJ,GACpB,IAAIuD,EAAOtC,SAASe,cAAc,SAASwB,WACvCC,EAAUF,EAAK9B,UACnB,IAAKgC,EAAQC,QAAQtD,IACjB,GAAIa,SAASG,YAAa,CACtB,IAAIuC,EAAM1C,SAASG,cACnBuC,EAAIC,SAASL,EAAME,EAAQC,QAAQtD,IACnCuD,EAAIE,OAAON,EAAME,EAAQC,QAAQtD,GAAQA,EAAK0D,QAC9C,IAAIC,EAAe9C,SAAS+C,cAAc,QACtCC,EAAKhD,SAAS+C,cAAc,MACtB,UAAVhE,EAAoB+D,EAAa/D,MAAME,MAAQ,OACrC,eAAVF,EAAyB+D,EAAa/D,MAAMG,WAAa,MAC/C,SAAVH,EAAmB+D,EAAa/D,MAAMC,SAAW,OACrC8D,EAAa/D,MAAMG,WAAa,QAC9B,OAAVH,EACA2D,EAAIO,iBAAiBD,GAErBN,EAAIO,iBAAiBH,SAI7BlC,MAAM,yE,+BA4DV,OACI,yBAAKnC,UAAU,OACX,0BAAMyE,YAAY,EACZzE,UAAU,OACV0E,UAAWd,KAAKhC,gBAEtB,6BACKgC,KAAKhD,MAAMI,UAAU2D,KAAI,SAAA3D,GAAS,OAAK,kBAAC,EAAD,eAAa4D,IAAK5D,EAAUuB,IAAQvB,QAEhF,yBAAKhB,UAAU,WACX,kBAAC,EAAD,CAAQG,QAASyD,KAAKJ,SAAUxD,UAAU,SAASI,MAAO,cAC1D,kBAAC,EAAD,CAAQD,QAASyD,KAAKN,YAAatD,UAAU,SAASI,MAAO,iBAC7D,kBAAC,EAAD,CAAQD,QAASyD,KAAKH,WAAYzD,UAAU,SAASI,MAAO,iBAC5D,kBAAC,EAAD,CAAQD,QAASyD,KAAKF,SAAU1D,UAAU,SAASI,MAAO,OAC1D,kBAAC,EAAD,CAAQD,QAASyD,KAAKxB,WAAYpC,UAAU,SAASI,MAAO,sB,GA5G9DyE,IAAMC,WCOJC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASnC,MACvB,2DCZNoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7D,SAAS8D,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.214e7e86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3GV2j\"};","import React from \"react\";\r\nimport styles from './Button.module.scss'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button className={`${styles.button} ${props.className && props.className}`}\r\n                onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\nexport default Button","import React from \"react\";\r\n\r\nconst NodeElement = (props) =>{\r\n    let defaulSize = '20px',\r\n        defaultColor = 'black',\r\n        defaultBg = 'white';\r\n    return (\r\n        <span style={{fontSize: props.fontSize || defaulSize,\r\n            color: props.color || defaultColor,\r\n            background: props.background} || defaultBg} >\r\n            {props.text + ' '}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default  NodeElement","import React from 'react';\nimport './App.scss';\nimport Button from \"./components/shared/Button/Button\";\nimport NodeElement from \"./components/NodeEmelent/NodeElement\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        let text = document.querySelector('.text');\n        text.innerHTML = `${this.state.text}`\n    }\n    state = {\n        text: 'Hi My lovely little Ponny',\n        cutText: '',\n        focusOffset: 0,\n        anchorOffset: 0,\n        textNodes: [],\n    }\n    domRangeHighlight(text, style) {\n        let root = document.querySelector('.text').firstChild;\n        let content = root.nodeValue;\n        if (~content.indexOf(text)) {\n            if (document.createRange) {\n                let rng = document.createRange();\n                rng.setStart(root, content.indexOf(text));\n                rng.setEnd(root, content.indexOf(text) + text.length);\n                let highlightDiv = document.createElement('span');\n                let br = document.createElement('br');\n                style === 'color' ? highlightDiv.style.color = 'blue' :\n                style === 'background' ? highlightDiv.style.background = 'red' :\n                style === 'font' ? highlightDiv.style.fontSize = '40px' :\n                            highlightDiv.style.background = 'white'\n                if (style === 'br') {\n                    rng.surroundContents(br);\n                } else {\n                    rng.surroundContents(highlightDiv);\n                }\n            }\n        } else {\n            alert('Немає збігів');\n        }\n    }\n    getRangeObject = (win) => {\n        win = win || window;\n        if (win.getSelection) {\n            try {\n                return win.getSelection().getRangeAt(0);\n            } catch (e) { }\n        } else if (win.document.selection) {\n            var range = win.document.selection.createRange();\n            return this.fixIERangeObject(range, win);\n        }\n        return null;\n    }\n    setNewCutText = () => {\n        var range = this.getRangeObject();\n        if (range) {\n            this.setState({\n                text: range.startContainer.nodeValue,\n                cutText: range.toString(),\n                focusOffset: range.startOffset,\n                anchorOffset: range.endOffset,\n            })\n        } else {\n            alert('Виділіть текст');\n        }\n    }\n    nodeToJson = () => {\n        const body = document.querySelector('.text');\n        let textNodes = [];\n        let id = 0;\n        function recursy(element) {\n            element.childNodes.forEach((node => {\n                if (node.nodeName.match(/^SPAN/)) {\n                    const obj = {\n                        id: id, text: node.textContent,  fontSize: node.style.fontSize ? node.style.fontSize : '20px',\n                        color: node.style.color ? node.style.color : 'black',\n                        background: node.style.background ? node.style.background : 'white',\n                        nodeName: node.nodeName,\n                    }\n                    id++\n                    textNodes.push(obj)\n                } else { recursy(node)}\n            }))\n        }\n\n        recursy(body)\n        this.setState({textNodes}, () => {\n            alert('Відкрийте консоль')\n            console.log(JSON.stringify(this.state.textNodes))\n        })\n\n    }\n    changeColor = () => {this.domRangeHighlight(this.state.cutText, 'color');}\n    changeBg = () => {this.domRangeHighlight(this.state.cutText, 'background');}\n    zoomInFont = () => {this.domRangeHighlight(this.state.cutText, 'font'); }\n    createBr = () => { this.domRangeHighlight(this.state.cutText, 'br'); }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <span spellCheck={true}\n                      className=\"text\"\n                      onMouseUp={this.setNewCutText}>\n                </span>\n                <div>\n                    {this.state.textNodes.map(textNodes => (<NodeElement key={textNodes.id} {...textNodes} />))}\n                </div>\n                <div className=\"buttons\">\n                    <Button onClick={this.changeBg} className=\"button\" value={\"change bg\"}/>\n                    <Button onClick={this.changeColor} className=\"button\" value={\"change color\"}/>\n                    <Button onClick={this.zoomInFont} className=\"button\" value={\"zoom in font\"}/>\n                    <Button onClick={this.createBr} className=\"button\" value={\"br\"}/>\n                    <Button onClick={this.nodeToJson} className=\"button\" value={\"create JSON\"}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}